<?xml version="1.0" encoding="UTF-8"?>
<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">

    <modelVersion>4.0.0</modelVersion>
    <groupId>com.shutterfly.crp</groupId>
    <artifactId>crp-batik</artifactId>
    <version>1.0.0-SNAPSHOT</version>
    
	<repositories>
        <repository>
            <id>central</id>
            <url>http://artifact.stage.shutterfly.com:8081/artifactory/sfly-repos</url>
            <releases>
                <enabled>true</enabled>
            </releases>
       </repository>
	</repositories>
	
	<!-- Originally batik comes with 3 source folders: sources, sources-1.3, and sources-1.4.
	To satisfy maven, which needs a single source directory, we've flushed sources-1.3 (which
	contains files compatable with Java 1.3) and copied the files from sources-1.4 (files compatable 
	with Java 1.4) into sources. The files in sources-1.4 do not exist in sources, so no 
	merging was neeeded.  -->
	
	<build>
		<sourceDirectory>sources</sourceDirectory>
		
		<resources>
			<resource><directory>resources</directory></resource>
		</resources>
		
		<!-- Exclude some files from build. (Just too much headache to build it.) -->
	  	<plugins>
	    	<plugin>
	      		<groupId>org.apache.maven.plugins</groupId>
	      		<artifactId>maven-compiler-plugin</artifactId>
	      		<version>3.3</version>
	      		<configuration>
					<!-- The following is to work around errors "package com.sun.image.codec.jpeg does not exist" 
					when building on the command line. 
					See http://stackoverflow.com/questions/1906673/import-com-sun-image-codec-jpeg 
					Also, in your path make sure JAVA_HOME/bin comes first. Otherwise mvn will use /usr/bin/javac
					when forking.
					-->
					<fork>true</fork>
					<compilerArgs>
						<arg>-XDignore.symbol.file</arg>
					</compilerArgs> 
	      		
	      			<!-- Don't compile these. Too many dependencies. -->
	        		<excludes>	        		
	          			<exclude>org/apache/batik/script/jacl/*.java</exclude>
	          			<exclude>org/apache/batik/script/jpython/*.java</exclude>
	        		</excludes>
	      		</configuration>
	    	</plugin>
	    	
			<!-- And exclude the same files from Eclipse. -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-eclipse-plugin</artifactId>
				<version>2.9</version>
				<configuration>
					<sourceExcludes>
						<sourceExclude>org/apache/batik/script/jacl/*.java</sourceExclude>
						<sourceExclude>org/apache/batik/script/jpython/*.java</sourceExclude>
					</sourceExcludes>
				</configuration>
			</plugin>
	  	</plugins>
 	</build>
 	
	<dependencies>
		<dependency>
			<groupId>log4j</groupId>
			<artifactId>log4j</artifactId>
			<version>1.2.17</version>
		</dependency>
		<dependency>
			<groupId>com.itextpdf</groupId>
			<artifactId>itextpdf</artifactId>
			<version>5.5.5</version>
		</dependency>
	    <dependency>
	        <groupId>com.shutterfly.3rdparty</groupId>
	        <artifactId>w3c</artifactId>
	         <version>1.0.0</version>
	    </dependency>
	    <dependency>
	        <groupId>xalan</groupId>
	        <artifactId>xalan</artifactId>
	        <version>2.7.1</version>
	    </dependency>
	    <dependency>
	        <groupId>xerces</groupId>
	        <artifactId>xmlParserAPIs</artifactId>
	        <version>2.6.2</version>
	    </dependency>
	    
	    <!-- org.apache.xmlgraphics added to get FOP to use SFLY CMYK color space. The
	    commons stuff is added to ensure that 2.4 of commons-io is used. -->
		<dependency>
			<groupId>commons-io</groupId>
			<artifactId>commons-io</artifactId>
			<version>2.4</version>
		</dependency>
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-lang3</artifactId>
			<version>3.3.2</version>
		</dependency>
		<dependency>
			<groupId>org.apache.xmlgraphics</groupId>
			<artifactId>xmlgraphics-commons</artifactId>
			<version>1.5</version>
		</dependency>
		
	    <!-- Note that rhino:js and xml-apis:xml-apis-ext are two of the jars packaged 
	    in batik's lib folder. We're getting them now from central repository rather than 
	    the batik lib folder as in the original batik ant build. The other jars in the 
	    batik lib file are superceded by the above dependencies. -->
		<dependency>
			<groupId>rhino</groupId>
			<artifactId>js</artifactId>
			<version>1.7R2</version>
		</dependency>
		<dependency>
	        <groupId>xml-apis</groupId>
	        <artifactId>xml-apis-ext</artifactId>
	        <version>1.3.04</version>
	    </dependency>
		<dependency>  
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
	        <version>1.7.8</version>
        </dependency>
	</dependencies>
</project>
